services:
  postgres:
    container_name: postgres
    image: postgres
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - PGDATA=/data/postgres
    volumes:
      - postgres:/data/postgres
    ports:
      - "5432:5432"
    networks:
      - bookstore
    restart: unless-stopped

  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    ports:
      - "9411:9411"
    networks:
      - bookstore

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper:/data/zookeeper
    ports:
      - "2181:2181"
    networks:
      - bookstore
    restart: unless-stopped

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    volumes:
      - kafka:/data/kafka
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9093
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - bookstore
    restart: unless-stopped
    depends_on:
      - zookeeper

  eureka-server:
    image: agarfuin/eureka-server:latest
    container_name: eureka-server
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_SERVER_PORT=8761
      - EUREKA_CLIENT_REGISTER_WITH_EUREKA=false
      - EUREKA_CLIENT_FETCH_REGISTRY=false
    ports:
      - "8761:8761"
    networks:
      - bookstore
    depends_on:
      - zipkin

  api-gateway:
    image: agarfuin/api-gateway:latest
    container_name: api-gateway
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
    networks:
      - bookstore
    ports:
      - "8080:8080"
    depends_on:
      - zipkin
      - eureka-server

  notification:
    image: agarfuin/notification-service:latest
    container_name: notification
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - MAIL_HOST=${MAIL_HOST}
      - MAIL_USERNAME=${MAIL_USERNAME}
      - MAIL_PASSWORD=${MAIL_PASSWORD}
      - MAIL_PORT=${MAIL_PORT}
    networks:
      - bookstore
    expose:
      - "8090"
    depends_on:
      - zipkin
      - eureka-server
      - postgres
      - kafka

  auth:
    image: agarfuin/auth-service:latest
    container_name: auth
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
    networks:
      - bookstore
    expose:
      - "8082"
    depends_on:
      - zipkin
      - eureka-server
      - postgres
      - kafka

  book:
    image: agarfuin/book-service:latest
    container_name: book
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    networks:
      - bookstore
    expose:
      - "8083"
    depends_on:
      - zipkin
      - eureka-server
      - postgres

  user:
    image: agarfuin/user-service
    container_name: user
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    networks:
      - bookstore
    expose:
      - "8081"
    depends_on:
      - zipkin
      - eureka-server
      - postgres

networks:
  bookstore:
    driver: bridge

volumes:
  postgres:
  kafka:
  zookeeper:
